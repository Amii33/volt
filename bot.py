import sqlite3
import logging
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_CHAT_ID = 167162909  # 1016263757 –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
BOT_TOKEN = "7816437926:AAFRf1xhZHlJvvoys4s3MBdxP-XP76x_35w"  # –í–∞—à —Ç–æ–∫–µ–Ω

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
SELECT_DATE, ENTER_DETAILS, SELECT_LOCATION, CONFIRMATION = range(4)

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—é
LOCATION_INSTRUCTIONS = {
    "–ü–æ–¥–æ–ª—å—Å–∫": """üöå<b>–ù–ê –°–ö–õ–ê–îüöå</b>\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:
<b>07.00</b> –ü–æ–¥–æ–ª—å—Å–∫, –ø—Ä–æ–µ–∑–¥ –ê–≤–∏–∞—Ç–æ—Ä–æ–≤ –¥. 1 (–ø–∞—Ä–∫–æ–≤–∫–∞ —É –¢–¶ –ú–æ–ª–æ—Ç–æ–∫)
<b>07.20</b> –°—Ç–∞–Ω—Ü–∏—è –ú–¶–î –ü–æ–¥–æ–ª—å—Å–∫ (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É–ª–∏—Ü –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–∞—è –∏ –†–æ—â–∏–Ω—Å–∫–∞—è, –æ—Å—Ç.–°—Ç—Ä–æ–π–∏–Ω–¥—É—Å—Ç—Ä–∏—è) (üìç<a href="https://yandex.ru/maps/213/moscow/?ll=37.566647%2C55.430322&mode=search&sll=37.567108%2C55.430408&text=55.430408%2C37.567108&utm_source=share&z=19">–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ</a>üìç)\n
üöå<b>–û–ë–†–ê–¢–ù–ûüöå</b>:\n
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:
<b>20.15</b> - –¥. –ö—É—á–∏–Ω–æ (–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω) —Å 50–∞
<b>20.35</b> - –ú–¶–î –ü–æ–¥–æ–ª—å—Å–∫
<b>20.45</b> - –û—Å—Ç. –ö—Ä–∞—Å–Ω–∞—è –≥–æ—Ä–∫–∞ 55.450104,37.552475
<b>20.50</b> - –ü–æ–¥–æ–ª—å—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ê–¢–ü-6
<b>20.55</b> - –ü–æ–¥–æ–ª—å—Å–∫, –ø—Ä-–∫—Ç –Æ–Ω—ã—Ö –õ–µ–Ω–∏–Ω—Ü–µ–≤ (–æ—Å—Ç. –ù–æ–≤–æ-–°—ã—Ä–æ–≤–æ)""",
    "–ú–æ—Å–∫–≤–∞": """üöå<b>–ù–ê –°–ö–õ–ê–î</b>üöå\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:
<b>07:10</b> - —Å—Ç. –º–µ—Ç—Ä–æ –ü—Ä–∞–∂—Å–∫–∞—è (üìç<a href="https://yandex.ru/maps/213/moscow/?indoorLevel=1&ll=37.608305%2C55.609292&mode=search&sll=37.607936%2C55.609226&text=55.609226%2C37.607936&utm_source=share&z=18">–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ</a>üìç)
<b>08:00</b> - –¥. –ö—É—á–∏–Ω–æ (–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω)  —Å 50–∞\n
üöå<b>–û–ë–†–ê–¢–ù–û</b>üöå:\n
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:
<b>20:15</b> - –¥. –ö—É—á–∏–Ω–æ (–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω) —Å 50–∞
<b>20:50</b> - –º–µ—Ç—Ä–æ –ê–Ω–Ω–∏–Ω–æ
<b>21:00</b> - –º–µ—Ç—Ä–æ –ü—Ä–∞–∂—Å–∫–∞—è (üìç<a href="https://yandex.ru/maps/213/moscow/?ll=37.609883%2C55.608851&mode=search&sll=37.609728%2C55.609083&text=55.609083%2C37.609728&utm_source=share&z=18">–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ</a>üìç)
""",
    "–î–æ–º–æ–¥–µ–¥–æ–≤–æ": """üöå<b>–ù–ê –°–ö–õ–ê–î</b>üöå\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:
<b>07:20</b> - –î–æ–º–æ–¥–µ–¥–æ–≤–æ, –æ—Å—Ç. –ù–æ–≤–∞—è —É–ª–∏—Ü–∞ (–≤ —Å—Ç–æ—Ä–æ–Ω—É –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–æ) (üìç<a href="https://yandex.ru/maps/10725/domodedovo/?ll=37.764505%2C55.436585&mode=search&sll=37.764605%2C55.436547&text=55.436547%2C37.764605&utm_campaign=desktop&utm_medium=search&utm_source=share&z=20">–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ</a>üìç)
<b>07:45</b> - –¥. –ö—É—á–∏–Ω–æ (–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω) —Å 50–∞\n
üöå<b>–û–ë–†–ê–¢–ù–û</b>üöå:\n
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:
<b>20.15</b> - –¥. –ö—É—á–∏–Ω–æ (–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω) —Å50–∞
<b>20:30</b> - –î–æ–º–æ–¥–µ–¥–æ–≤–æ, –æ—Å—Ç. –ù–æ–≤–∞—è —É–ª–∏—Ü–∞ (–≤ —Å—Ç–æ—Ä–æ–Ω—É –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–æ) (üìç<a href="https://yandex.ru/maps/10725/domodedovo/?ll=37.764505%2C55.436585&mode=search&sll=37.764605%2C55.436547&text=55.436547%2C37.764605&utm_campaign=desktop&utm_medium=search&utm_source=share&z=20">–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ</a>)üìç""",
    "–î–æ–±–µ—Ä—É—Å—å –Ω–∞ –ª–∏—á–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ": "üöï–¥. –ö—É—á–∏–Ω–æ (–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω) —Å50–∞"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ."""
    with sqlite3.connect('work_bot.db') as conn:
        cursor = conn.cursor()
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS work_dates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL UNIQUE,
            slots INTEGER NOT NULL
        )
        ''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            phone TEXT NOT NULL,
            location TEXT NOT NULL,
            date_id INTEGER NOT NULL,
            FOREIGN KEY (date_id) REFERENCES work_dates(id),
            UNIQUE(user_id, date_id)
        )
        ''')
        
        conn.commit()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_available_dates():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏."""
    with sqlite3.connect('work_bot.db') as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('''
        SELECT wd.id, wd.date, wd.slots, COUNT(u.id) as booked 
        FROM work_dates wd 
        LEFT JOIN users u ON wd.id = u.date_id 
        GROUP BY wd.id 
        HAVING booked < wd.slots OR booked IS NULL
        ''')
        
        return cursor.fetchall()

def add_user_to_db(user_id, name, phone, location, date_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è."""
    with sqlite3.connect('work_bot.db') as conn:
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
            INSERT INTO users (user_id, name, phone, location, date_id)
            VALUES (?, ?, ?, ?, ?)
            ''', (user_id, name, phone, location, date_id))
            conn.commit()
            return True
        except sqlite3.IntegrityError:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            conn.rollback()
            return False

def get_date_by_id(date_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –ø–æ ID."""
    with sqlite3.connect('work_bot.db') as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM work_dates WHERE id = ?', (date_id,))
        return cursor.fetchone()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    dates = get_available_dates()
    
    if not dates:
        await update.message.reply_text('–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.')
        return ConversationHandler.END
    
    keyboard = [
        [InlineKeyboardButton(date['date'], callback_data=str(date['id']))]
        for date in dates
    ]
    
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏:',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_DATE

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    date_id = int(query.data)
    context.user_data['date_id'] = date_id
    
    await query.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
             "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, +79123456789"
    )
    return ENTER_DETAILS

async def enter_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
    try:
        text = update.message.text
        name, phone = [part.strip() for part in text.split(',', 1)]
        
        if not phone.replace('+', '').isdigit():
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            
        context.user_data['name'] = name
        context.user_data['phone'] = phone
        
        keyboard = [
            [InlineKeyboardButton(loc, callback_data=loc)]
            for loc in LOCATION_INSTRUCTIONS.keys()
        ]
        
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECT_LOCATION
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
            '–§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n'
            '–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, +79123456789'
        )
        return ENTER_DETAILS

async def select_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    location = query.data
    context.user_data['location'] = location
    
    date_info = get_date_by_id(context.user_data['date_id'])
    
    confirmation_text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üìÖ –î–∞—Ç–∞: {date_info['date']}\n"
        f"üë§ –§–ò–û: {context.user_data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üìç –ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {location}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        ]
    ]
    
    await query.edit_message_text(
        text=confirmation_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRMATION

async def confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm":
        user_id = update.effective_user.id
        date_id = context.user_data['date_id']
        name = context.user_data['name']
        phone = context.user_data['phone']
        location = context.user_data['location']
        
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if add_user_to_db(user_id, name, phone, location, date_id):
            date_info = get_date_by_id(date_id)
            
            success_message = (
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É!\n\n"
                f"üìÖ –î–∞—Ç–∞: {date_info['date']}\n"
                f"üë§ –§–ò–û: {name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìç –ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {location}\n\n"
                f"‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {LOCATION_INSTRUCTIONS.get(location, '')}"
            )
            
            await query.edit_message_text(
            text=success_message,
            parse_mode="HTML"  
        )
            
            if ADMIN_CHAT_ID:
                admin_message = (
                    "üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É:\n\n"
                    f"üìÖ –î–∞—Ç–∞: {date_info['date']}\n"
                    f"üë§ –§–ò–û: {name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {location}\n"
                    f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}"
                )
                await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=admin_message
                )
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            date_info = get_date_by_id(date_id)
            await query.edit_message_text(
                text=f"‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {date_info['date']}!\n"
                     "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
            )
    else:
        await query.edit_message_text(text="‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    return ConversationHandler.END
    

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã."""
    await update.message.reply_text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
async def admin_add_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    try:
        if len(context.args) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            
        date_str = context.args[0]
        slots = int(context.args[1])
        
        datetime.strptime(date_str, '%d.%m.%Y')
        
        with sqlite3.connect('work_bot.db') as conn:
            cursor = conn.cursor()
            
            try:
                cursor.execute('''
                INSERT INTO work_dates (date, slots) VALUES (?, ?)
                ''', (date_str, slots))
                
                conn.commit()
                await update.message.reply_text(
                    f"‚úÖ –î–∞—Ç–∞ {date_str} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ({slots} –º–µ—Å—Ç)"
                )
            except sqlite3.IntegrityError:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –î–∞—Ç–∞ {date_str} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ"
                )
                
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_date –î–î.–ú–ú.–ì–ì–ì–ì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç\n\n"
            "–ü—Ä–∏–º–µ—Ä: /add_date 15.08.2023 10"
        )

async def admin_list_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö."""
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    with sqlite3.connect('work_bot.db') as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('''
        SELECT wd.id, wd.date, wd.slots, COUNT(u.id) as booked 
        FROM work_dates wd 
        LEFT JOIN users u ON wd.id = u.date_id 
        GROUP BY wd.id
        ''')
        
        dates = cursor.fetchall()
    
    if not dates:
        await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.")
        return
    
    message = "üìÖ –°–ø–∏—Å–æ–∫ –¥–∞—Ç –∏ –∑–∞–ø–∏—Å–µ–π:\n\n"
    for date in dates:
        message += (
            f"{date['date']}:\n"
            f"  –í—Å–µ–≥–æ –º–µ—Å—Ç: {date['slots']}\n"
            f"  –ó–∞–ø–∏—Å–∞–Ω–æ: {date['booked']}\n"
            f"  –°–≤–æ–±–æ–¥–Ω–æ: {date['slots'] - date['booked']}\n\n"
        )
    
    await update.message.reply_text(message)

async def admin_list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã."""
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    try:
        date_str = context.args[0]
        
        with sqlite3.connect('work_bot.db') as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute('''
            SELECT u.name, u.phone, u.location, u.user_id 
            FROM users u 
            JOIN work_dates wd ON u.date_id = wd.id 
            WHERE wd.date = ?
            ''', (date_str,))
            
            users = cursor.fetchall()
        
        if not users:
            await update.message.reply_text(f"–ù–∞ –¥–∞—Ç—É {date_str} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return
        
        message = f"üë• –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –Ω–∞ {date_str}:\n\n"
        for user in users:
            message += (
                f"üë§ {user['name']}\n"
                f"üì± {user['phone']}\n"
                f"üìç {user['location']}\n"
                f"üÜî {user['user_id']}\n\n"
            )
        
        await update.message.reply_text(message)
        
    except IndexError:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ü—Ä–∏–º–µ—Ä: /list_users 15.08.2023"
        )

async def admin_delete_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –¥–∞—Ç—É –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    try:
        date_str = context.args[0]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        
        with sqlite3.connect('work_bot.db') as conn:
            cursor = conn.cursor()
            
            # 1. –ù–∞—Ö–æ–¥–∏–º ID –¥–∞—Ç—ã
            cursor.execute("SELECT id FROM work_dates WHERE date = ?", (date_str,))
            date_id = cursor.fetchone()
            
            if not date_id:
                await update.message.reply_text(f"‚ùå –î–∞—Ç–∞ {date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # 2. –£–¥–∞–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("DELETE FROM users WHERE date_id = ?", (date_id[0],))
            
            # 3. –£–¥–∞–ª—è–µ–º —Å–∞–º—É –¥–∞—Ç—É
            cursor.execute("DELETE FROM work_dates WHERE id = ?", (date_id[0],))
            
            conn.commit()
        
        await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ {date_str} –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!")
        
    except IndexError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /delete_date –î–î.–ú–ú.–ì–ì–ì–ì")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_DATE: [CallbackQueryHandler(select_date)],
            ENTER_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_details)],
            SELECT_LOCATION: [CallbackQueryHandler(select_location)],
            CONFIRMATION: [CallbackQueryHandler(confirmation)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=False  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ False –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("add_date", admin_add_date))
    application.add_handler(CommandHandler("list_dates", admin_list_dates))
    application.add_handler(CommandHandler("list_users", admin_list_users))
    application.add_handler(CommandHandler("delete_date", admin_delete_date))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
